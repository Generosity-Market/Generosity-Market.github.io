{"version":3,"sources":["components/Heading/Heading.js","components/CauseTile/CauseTile.js","components/Slider/Slider.js","screens/CauseList/components/SliderSection/SliderSection.js","screens/CauseList/CauseList.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Styles","borderBottom","color","margin","paddingBottom","width","Heading","props","a","createElement","className","style","text","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","_utilities_utilities__WEBPACK_IMPORTED_MODULE_2__","_services_services__WEBPACK_IMPORTED_MODULE_3__","CauseTile","_ref","percentRaised","cause","raised","isFeatured","causeSelected","inViewport","innerRef","imageURL","mainImage","Services","getLazyImagePlaceholder","onClick","ref","to","concat","id","backgroundImage","amount","toFixed","src","Utils","getIconURL","icon","alt","name","defaultProps","Slider","children","CauseTileWithLazyLoad","handleViewport","SliderSection","featured","causeList","react_default","react","map","key","Number","totalRaised","CauseList","this","length","getCauseList","_this$props","components_SliderSection_SliderSection","headingText","Component","mapDispatchToProps","connect","state"],"mappings":"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","file":"static/js/4.a4c6a7e4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Styles = {\n  borderBottom: 'var(--border)',\n  color: 'var(--bright-green)',\n  margin: '1rem auto',\n  paddingBottom: '0.5rem',\n  width: '92%'\n}\n\nconst Heading = props =>\n<h3 className=\"Heading\" style={Styles}>{props.text}</h3>\n\nexport default Heading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Utils from '../../utilities/utilities';\nimport Services from '../../services/services';\nimport './CauseTile.css';\n\nconst CauseTile = ({ cause, raised, isFeatured, causeSelected, inViewport, innerRef }) => {\n\n  const imageURL = (inViewport ? cause.mainImage : Services.getLazyImagePlaceholder());\n  const calculateBarWidth = (percentRaised) => {\n    if (percentRaised > 5) {\n      return percentRaised - 5;\n    } else {\n      return 1;\n    }\n  };\n\n  return(\n    <div \n      className={isFeatured ? \"CauseTile featured\" : \"CauseTile\"}\n      onClick={() => causeSelected(cause)}\n      ref={innerRef}\n    >\n      <Link to={`/cause/${cause.id}`}>\n\n        <div \n          className=\"wrapper\"\n          style={{backgroundImage: `url(${imageURL})`}}\n        >\n          <div className=\"progress\" style={{ width: `${calculateBarWidth(raised / cause.amount * 100).toFixed(2)}%`}}></div>\n          <h5>${raised || 0} of ${cause.amount}</h5>\n        </div>\n\n        <h4>\n          {isFeatured &&\n          <img src={Utils.getIconURL(cause.icon)} alt={cause.icon}/>}\n          <p>{cause.name}</p>\n        </h4>\n\n      </Link>\n    </div>\n  );\n}\n\nCauseTile.propTypes = {\n\t/**\n   * The cause object where we will pull multiple values\n   */\n\tcause: PropTypes.object.isRequired,\n\t/**\n   * An integer that represents the total funding raised\n   */\n\traised: PropTypes.number,\n\t/**\n   * Boolean that tells if this is a featured cause\n   */\n  isFeatured: PropTypes.bool.isRequired,\n  /**\n   * Boolean that tells if this component is in the viewport, used for lazy loading images\n   */\n  inViewport: PropTypes.bool.isRequired,\n}\n\nCauseTile.defaultProps = {\n  cause: {},\n  raised: 0,\n  isFeatured: false,\n  inViewport: false,\n}\n\nexport default CauseTile;\n","import React from 'react';\nimport './Slider.css';\n\nconst Slider = (props) => <div className=\"Slider\">{props.children}</div>;\n\nexport default Slider;\n","import React, { Fragment } from 'react';\n\n// Import HOC to see if component is in viewport\nimport handleViewport from 'react-in-viewport';\n\n// Component imports\nimport CauseTile from '../../../../components/CauseTile/CauseTile';\nimport Slider from '../../../../components/Slider/Slider';\nimport Heading from '../../../../components/Heading/Heading';\n\nconst CauseTileWithLazyLoad = handleViewport(CauseTile);\n\nconst SliderSection = ({\n    featured,\n    causeList,\n    causeSelected,\n}) => {\n\n    const isFeatured = (isFeatured) => {\n        return causeList.map(cause => {\n            return (\n                <CauseTileWithLazyLoad\n                    key={cause.id}\n                    cause={cause}\n                    isFeatured={isFeatured}\n                    raised={Number(cause.totalRaised)}\n                    causeSelected={causeSelected}\n                />\n            );\n        });\n    };\n\n    return (\n        <Fragment>\n            <Heading text={'Featured'} />\n            <Slider>\n                {isFeatured(featured)}\n            </Slider>\n        </Fragment>\n    );\n};\n\nexport default SliderSection;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getCauseList, causeSelected } from '../../actions/actions';\nimport './causelist.css';\n\nimport SliderSection from './components/SliderSection/SliderSection';\n\nconst returnEmpty = (getCauseList) => {\n  return (\n    <div className=\"emptyCauses\">\n      <h2>There are no causes here my young padawan...</h2>\n    </div>\n  );\n}\n\n// TODO will need to update this to add the loader component\nclass CauseList extends Component {\n\n  componentDidMount() {\n    if (this.props.causeList.length === 0) {\n      this.props.getCauseList();\n    }\n  };\n\n  render() {\n    const { causeList, causeSelected } = this.props;\n\n    // TODO handle loading and state of no causes to show...\n    // TODO empty array could be cause by an error, give button to reload list if empty\n    return causeList && causeList.length ? (\n      <div className=\"CauseList\">\n        <SliderSection\n          headingText={'Featured'}\n          causeList={causeList}\n          featured={true}\n          causeSelected={causeSelected}\n        />\n\n        <SliderSection\n          headingText={'NearlyFunded'}\n          causeList={causeList}\n          featured={false}\n          causeSelected={causeSelected}\n        />\n\n        <SliderSection\n          headingText={'Recently Added'}\n          causeList={causeList}\n          featured={false}\n          causeSelected={causeSelected}\n        />\n\n      </div>\n    ) : returnEmpty(this.props.getCauseList);\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return { causeList: state.causeList }\n}\n\nconst mapDispatchToProps = { getCauseList, causeSelected };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CauseList);\n"],"sourceRoot":""}